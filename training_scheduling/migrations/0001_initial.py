# Generated by Django 4.1.3 on 2023-01-04 21:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Class_rooms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Site', models.CharField(choices=[('SITE1', 'site1'), ('SITE2', 'site2')], max_length=30)),
                ('seats', models.IntegerField()),
                ('created_date', models.DateField(auto_now=True)),
                ('class_available', models.BooleanField(default=True)),
                ('room_number', models.IntegerField(error_messages={'unique': 'This room has already been registered.'}, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Date',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='Trainings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Config', models.CharField(blank=True, choices=[('PPROJECT1', 'Project1'), ('PPROJECT2', 'Project2'), ('PPROJECT3', 'Project3'), ('PPROJECT4', 'Project4'), ('PPROJECT5', 'Project5')], default=None, max_length=30)),
                ('project', models.CharField(blank=True, choices=[('PPROJECT1', 'Project1'), ('PPROJECT2', 'Project2'), ('PPROJECT3', 'Project3'), ('PPROJECT4', 'Project4'), ('PPROJECT5', 'Project5')], default=None, max_length=30)),
                ('type_training', models.CharField(blank=True, choices=[('TYPE1', 'Type1'), ('TYPE2', 'Type2')], default=None, max_length=30)),
                ('created_date', models.DateField(auto_now=True)),
                ('pre_training_comment', models.CharField(blank=True, default=None, max_length=2000, null=True)),
                ('post_training_comment', models.CharField(blank=True, default=None, max_length=20000, null=True)),
                ('training_start_date', models.DateField()),
                ('training_end_date', models.DateField()),
                ('class_room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Class_rooms', to='training_scheduling.class_rooms')),
                ('reserved_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='User', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Training_days',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_comment', models.CharField(max_length=2000)),
                ('IT_comment', models.CharField(max_length=20000)),
                ('training_day_date', models.DateField()),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Trainings', to='training_scheduling.trainings')),
            ],
        ),
        migrations.CreateModel(
            name='Students',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pre_training_comment', models.CharField(blank=True, default=None, max_length=2000)),
                ('training_day_comment', models.CharField(blank=True, default=None, max_length=2000, null=True)),
                ('overall_comment', models.CharField(blank=True, default=None, max_length=2000, null=True)),
                ('training_day_arrival', models.TimeField(blank=True, default=None, null=True)),
                ('training_day_left', models.TimeField(blank=True, default=None, null=True)),
                ('training_day_attendance', models.BooleanField(blank=True, default=None, null=True)),
                ('student_name', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('student_surename', models.CharField(blank=True, default=None, max_length=100, null=True)),
                ('training_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Training_days', to='training_scheduling.training_days')),
            ],
        ),
        migrations.AddField(
            model_name='class_rooms',
            name='dates_unavailable',
            field=models.ManyToManyField(blank=True, null=True, related_name='unavailable', to='training_scheduling.date'),
        ),
    ]
